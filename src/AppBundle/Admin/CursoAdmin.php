<?php

namespace AppBundle\Admin;

use AppBundle\AppBundle;
use AppBundle\Entity\Coordenacao;
use AppBundle\Entity\Docente;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;

class CursoAdmin extends AbstractAdmin
{
    public $coordAnterior;
    /**
     * @param DatagridMapper $datagridMapper
     */
    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper
            ->add('id')
            ->add('nomeCurso')
            ->add('codigoCurso')
            ->add('tipoCurso')
            ->add('isActive')
        ;
    }

    /**
     * @param ListMapper $listMapper
     */
    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper
            ->add('id')
            ->add('nomeCurso')
            ->add('codigoCurso')
            ->add('coordenadorAtual')
            ->add('isActive')
            ->add('_action', null, array(
                'actions' => array(
                    'show' => array(),
                    'edit' => array(),
                    'delete' => array(),
                ),
            ))
        ;
    }

    /**
     * @param FormMapper $formMapper
     */
    protected function configureFormFields(FormMapper $formMapper)
    {
        $formMapper
            ->add('nomeCurso')
            ->add('areaCurso')
            ->add('modalidadeCurso')
            ->add('tipoCurso')
            ->add('coordenadorAtual', 'sonata_type_model', array(
                'class' => 'AppBundle\Entity\Docente',
                'property' => 'matricula',
                'label' => 'Coordenador',
            ))

        ;
    }

    /**
     * @param ShowMapper $showMapper
     */
    protected function configureShowFields(ShowMapper $showMapper)
    {
        $showMapper
            ->add('id')
            ->add('nomeCurso')
            ->add('codigoCurso')
            ->add('coordenadorAtual')
            ->add('isActive')
        ;
    }

    public function prePersist($object)
    {
        $object->setCodigoCurso("{$object->getModalidadeCurso()->getId()}{$object->getTipoCurso()->getId()}{$object->getAreaCurso()->getId()}");
        //$object->codigoCurso = $object->modalidadeCurso.$object->tipoCurso.$object->areaCurso;
        parent::prePersist($object); // TODO: Change the autogenerated stub
    }

    public function postPersist($object)
    {
        $object->setCodigoCurso("{$object->getCodigoCurso()}{$object->getId()}");
        $em = $this->getModelManager();
        $em->update($object);

        $this->adicionarCoordenacao($object);

        parent::postPersist($object); // TODO: Change the autogenerated stub
    }

    public function postUpdate($object)
    {
        //Comparando o valor editado pelo usuário com o atual no BD.
        if($this->getCoordAnterior() != null)
        {
            $x = $this->getCoordAnterior()->getId();
            $y = $object->getCoordenadorAtual()->getId();
            if($x != $y){
                $this->atualizarCoordenacaoAnterior($x, $object);
                $this->adicionarCoordenacao($object);
            }
            else{
                error_log("POST-UPDATE: x=".$x." e y=".$y, 0);
            }

        }
        parent::postUpdate($object); // TODO: Change the autogenerated stub
    }
    //Adicionando na tabela Coordenações que serve como histórico das coordenações de um curso
    private function adicionarCoordenacao($object)
    {
        $coord = new Coordenacao();
        $coord->setCoordenador($object->getCoordenadorAtual());
        $coord->setCurso($object);
        $dm = $this->getConfigurationPool()->getContainer()->get('doctrine')->getManagerForClass('AppBundle:Coordenacao');
        $dm->persist($coord);
        $dm->flush();
    }
    //Atualizando uma coordenação passada a fim de manter o histórico correto.
    private function atualizarCoordenacaoAnterior($coordAnterior, $curso)
    {
        $dm = $this->getConfigurationPool()->getContainer()->get('doctrine')->getManagerForClass('AppBundle:Coordenacao');
        $coord = $dm->getRepository('AppBundle:Coordenacao')->findOneBy(array('coordenador' => $coordAnterior, 'curso' => $curso->getId(), 'atual' => 1));
        $coord->setAtual(false);
        $coord->setDtTermino(new \DateTime());
        $dm->persist($coord);
        $dm->flush();

    }

    public function setCoordAnterior($coordAnt)
    {
        $this->coordAnterior = $coordAnt;
    }

    public function getCoordAnterior()
    {
        return $this->coordAnterior;
    }

}
